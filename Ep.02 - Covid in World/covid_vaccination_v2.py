# -*- coding: utf-8 -*-
"""Covid Vaccination_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XPDilwVpyEfjFBoTxkf0Y1ck9cZLJ5xR

#Um panorama geral sobre a COVID-19 no mundo
"""

!pip install statsmodels --upgrade

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.ar_model import AutoReg

"""# Leitura dos DataFrames"""

#url = '/content/drive/MyDrive/Datasets/country_vaccinations.csv'
url = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv'
df = pd.read_csv(url,sep=',')
df.head()

url2 = 'https://raw.githubusercontent.com/datasets/population/master/data/population.csv'
w_df = pd.read_csv(url2,sep=',')
w_df.head()

"""#Agrupando por País"""

df.groupby("location").mean()

"""## Média de Novos Casos Diários"""

media_casos_diarios = df.groupby("location").mean().new_cases.dropna().sort_values(ascending=False)

media_casos_diarios.drop(["World","Asia","Europe","North America","Africa","South America","European Union",],inplace=True)

maiores_media_casos = pd.DataFrame(media_casos_diarios.head(8))

maiores_media_casos.reset_index(inplace=True)

maiores_media_casos.columns = ["location","media_casos"]

maiores_media_casos

import matplotlib as mpl

# paletas -> Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r
sns.set_palette("Blues")

# estilo -> white, dark, whitegrid, darkgrid, ticks
sns.set_style("darkgrid")

sns.color_palette()

sns.set(rc={'figure.figsize':(15,6)})
#mpl.style.use("default")

ax = sns.barplot(x="location", y="media_casos", data=maiores_media_casos,palette="bone")
ax.set_xlabel('')
ax.set_ylabel('')
ax.set_title('Média de Casos Diários por País (Top 8)',fontsize=20)

"""## Média de Mortes por Dia"""

df.groupby("location").mean()

media_mortes = df.groupby("location").mean().new_deaths.dropna().sort_values(ascending=False)
media_mortes.drop(["World","Asia","Europe","North America","South America","European Union","Africa"],inplace=True)

media_mortes = pd.DataFrame(media_mortes.head(8))

media_mortes.reset_index(inplace=True)
media_mortes.columns = ["location","media_mortes"]
media_mortes

sns.set(rc={'figure.figsize':(15,6)})
ax = sns.barplot(x="location", y="media_mortes", data=media_mortes,palette="bone")
ax.set_xlabel('')
ax.set_ylabel("")
ax.set_title('Média de Mortes Diárias por País (Top 8)',fontsize=20)

"""## Número de Mortes Totais"""

total_mortes = df.groupby("location").sum().new_deaths.dropna().sort_values(ascending=False)
total_mortes.drop(["World","Asia","Europe","North America","South America","European Union","Africa"],inplace=True)

total_mortes = pd.DataFrame(total_mortes.head(8))
total_mortes.reset_index(inplace=True)
total_mortes.columns = ["location","total_mortes"]
total_mortes

sns.set(rc={'figure.figsize':(15,6)})
ax = sns.barplot(x="location", y="total_mortes", data=total_mortes,palette="bone")
ax.set_xlabel('')
ax.set_ylabel("")
ax.set_title('Quantidade Total de Mortes por País (Top 8)',fontsize=20)

"""## Número de Casos Totais"""

df.groupby("location").sum().head(3)

total_casos = df.groupby("location").sum().new_cases.dropna().sort_values(ascending=False)
total_casos.drop(["World","Asia","Europe","North America","South America","European Union","Africa"],inplace=True)
total_casos = pd.DataFrame(total_casos.head(8))
total_casos.reset_index(inplace=True)
total_casos.columns = ["location","total_casos"]
total_casos

sns.set(rc={'figure.figsize':(15,6)})
ax = sns.barplot(x="location", y="total_casos", data=total_casos,palette="bone")
ax.set_xlabel('')
ax.set_ylabel('')
ax.set_title('Quantidade Total de Casos por País',fontsize=20)

"""## Letalidade"""

letal = df[['location','date','new_cases','new_deaths']]
letal = letal.groupby("location").sum()
letal['lethality'] = (letal.new_deaths/letal.new_cases)*100
letal.drop(["World","Asia","Europe","North America","South America","European Union","Africa"],inplace=True)
print(letal.lethality.mean())

letal.query("location == 'Brazil'")

letal = letal.dropna().sort_values(ascending=False,by="lethality").head(8).reset_index()
letal

sns.set(rc={'figure.figsize':(15,6)})
ax = sns.barplot(x="location", y="lethality", data=letal,palette="bone")
ax.set_xlabel('')
ax.set_ylabel('Quantidade de Mortes por Casos (%)')
ax.set_title('Países com Maior Taxa de Letalidade',fontsize=20)

"""## Rate de Reprodução (*reproduction_rate*)"""

#taxa_reproducao
taxa_reproducao = df
taxa_reproducao.date = pd.to_datetime(taxa_reproducao.date)
taxa_reproducao.reproduction_rate = pd.to_numeric(taxa_reproducao.reproduction_rate)

"""### Brazil"""

bra_rep_rate = taxa_reproducao.query("location == 'Brazil'")[["date","reproduction_rate"]]
bra_rep_rate.dropna(inplace=True)

maior_taxa_br = bra_rep_rate.set_index("date").idxmax(),bra_rep_rate.set_index("date").max()
menor_taxa_br = bra_rep_rate.set_index("date").idxmin(),bra_rep_rate.set_index("date").min()

maior_taxa_br

menor_taxa_br

bra_rep_rate.shape
bra_rep_rate.query("date == '2021-03-17'")

plt.plot(bra_rep_rate.reproduction_rate)

"""### USA"""

usa_rep_rate = taxa_reproducao.query("location == 'United States'")[["date","reproduction_rate"]]
usa_rep_rate.dropna(inplace=True)
maior_taxa_usa = usa_rep_rate.set_index("date").idxmax(),usa_rep_rate.set_index("date").max()
menor_taxa_usa = usa_rep_rate.set_index("date").idxmin(),usa_rep_rate.set_index("date").min()
print(maior_taxa_usa, menor_taxa_usa)

plt.plot(usa_rep_rate.reproduction_rate)

"""###India"""

ind_rep_rate = taxa_reproducao.query("location == 'India'")[["date","reproduction_rate"]]
ind_rep_rate.dropna(inplace=True)
maior_taxa = ind_rep_rate.set_index("date").idxmax(),ind_rep_rate.set_index("date").max()
menor_taxa = ind_rep_rate.set_index("date").idxmin(),ind_rep_rate.set_index("date").min()
print(maior_taxa, menor_taxa)

plt.plot(ind_rep_rate.reproduction_rate)

"""### Russia"""

rus_rep_rate = taxa_reproducao.query("location == 'Russia'")[["date","reproduction_rate"]]
rus_rep_rate.dropna(inplace=True)
maior_taxa = rus_rep_rate.set_index("date").idxmax(),rus_rep_rate.set_index("date").max()
menor_taxa = rus_rep_rate.set_index("date").idxmin(),rus_rep_rate.set_index("date").min()
print(maior_taxa, menor_taxa)

plt.plot(rus_rep_rate.reproduction_rate)

"""### Reino Unido"""

uk_rep_rate = taxa_reproducao.query("location == 'United Kingdom'")[["date","reproduction_rate"]]
uk_rep_rate.dropna(inplace=True)
maior_taxa = uk_rep_rate.set_index("date").idxmax(),uk_rep_rate.set_index("date").max()
menor_taxa = uk_rep_rate.set_index("date").idxmin(),uk_rep_rate.set_index("date").min()
print(maior_taxa, menor_taxa)

plt.plot(uk_rep_rate.reproduction_rate)

"""## França"""

fra_rep_rate = taxa_reproducao.query("location == 'France'")[["date","reproduction_rate"]]
fra_rep_rate.dropna(inplace=True)
maior_taxa = fra_rep_rate.set_index("date").idxmax(),fra_rep_rate.set_index("date").max()
menor_taxa = fra_rep_rate.set_index("date").idxmin(),fra_rep_rate.set_index("date").min()
print(maior_taxa, menor_taxa)

plt.plot(fra_rep_rate.reproduction_rate)

"""Plotar os gráficos juntos em um subplot de 6 visualizações

##Plots
"""

fig, axs = plt.subplots(nrows=2,ncols=3,sharey=True)

fig.set_size_inches((20,10))
fig.suptitle('Taxa de Reprodução do Vírus nos Países com Mais Casos',fontsize=30)

axs[0,0].plot(bra_rep_rate.date,bra_rep_rate.reproduction_rate,'k')
axs[0,1].plot(usa_rep_rate.date,usa_rep_rate.reproduction_rate,'k')
axs[0,2].plot(fra_rep_rate.date,fra_rep_rate.reproduction_rate,'k')

axs[1,0].plot(ind_rep_rate.date,ind_rep_rate.reproduction_rate,'k')
axs[1,1].plot(rus_rep_rate.date,rus_rep_rate.reproduction_rate,'k')
axs[1,2].plot(uk_rep_rate.date,uk_rep_rate.reproduction_rate,'k')

axs[0, 0].set_title('Brasil',{'fontsize': 20})
axs[0, 1].set_title('E.U.A.',{'fontsize': 20})
axs[0, 2].set_title('França',{'fontsize': 20})
axs[1, 0].set_title('Índia',{'fontsize': 20})
axs[1, 1].set_title('Russia',{'fontsize': 20})
axs[1, 2].set_title('Reino Unido',{'fontsize': 20})

"""# Modelo de Vacinação Brasil

## Modelo Brasil
"""

df.head()

df.shape

data = df.drop(df[df.total_vaccinations.isna()].index)

checked_data = data[["location","date","total_cases","total_deaths","total_vaccinations","people_vaccinated"]]

plt.subplots(figsize=(8, 8))
sns.heatmap(checked_data.corr(), annot=True, square=True)
plt.show()

br_vac = checked_data.query("location=='Brazil'")

br_vac.set_index("date",inplace=True)

br_vac.drop(axis=1,labels="location",inplace=True)

br_vac.head()

"""Conferindo se a série é temporal. Para isto, utiliza-se o teste Dickey-Fuller. Iremos utilizar o teste de Dickey-Fuller aumentado."""

print('p-value : {}'.format(sm.tsa.stattools.adfuller(br_vac.people_vaccinated)[1]))

"""P-Valor muito alto. Não podemos descartar a hipótese que a série é estacionária. """

temp = br_vac.drop(axis=1,labels=['total_cases','total_deaths','total_vaccinations'])
temp.head(2)

resultado_br_vac = seasonal_decompose(x=temp,period=14)

sns.set(rc={'figure.figsize':(7,5)})
resultado_br_vac.plot();

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

"""Verificando parâmetros de autocorrelação, pois a série aparenta ser estacionária"""

sns.set(rc={'figure.figsize':(5,5)})
plot_acf(temp);

sns.set(rc={'figure.figsize':(5,5)})
plot_pacf(temp,lags=14);

"""## Estimando modelo do Brasil

Utilizando modelo de autoregressão para validarmos
"""

from statsmodels.tsa.ar_model import AutoReg
lista = np.linspace(1,14,14)

lista

modelo_ajustado = AutoReg(temp,lags=lista,trend='c',seasonal=False,period=14).fit()

modelo_previsto = modelo_ajustado.predict(start=56,end=56+(365*3))

for i in range(56,56+(365*3)):
  if modelo_previsto[i] > 211000000:
    print(i)
    break

modelo_previsto = modelo_ajustado.predict(start=56,end=56+(350))

last_day = temp.index.max()
last_day = last_day.to_pydatetime()
new_index = []

from datetime import timedelta, date
import datetime

last_day = date.today()
end_date = last_day + datetime.timedelta(days=i)
print("Dia em que todos os brasileiros estariam vacinados: {}/{}/{}".format(end_date.day,end_date.month,end_date.year))

for i in range(1,352):
  new_index.append(last_day + datetime.timedelta(days=i))

temp.columns

fig = plt.figure(figsize=(15,6))
plt.plot(temp.index,temp.people_vaccinated,'k')
plt.title("Evolução da Vacina no Brasil",fontsize=20)
plt.ylabel("Quantidade de Pessoas (em Milhões)")

#plt.plot(new_index,modelo_previsto,'r')

"""##Evolução da Vacina em outros Países"""

df.head()

vac_world = df[['location','date','people_vaccinated']]

vac_world

vac_world = vac_world.groupby('date').sum()

vac_world = vac_world.loc[(vac_world!=0).any(1)]

vac_world.shape[0]

fig = plt.figure(figsize=(15,6))
plt.plot(vac_world,'k')
plt.title("Evolução da Vacina no Mundo",fontsize=20)
plt.ylabel("Quantidade de Pessoas (em dezenas de Milhões)")

vac_world = df[['location','date','people_vaccinated']]
vac_world.head()

vac_world.dropna(axis=0,inplace=True)

vac_world.set_index("location",inplace=True)

vac_world.drop(["World","Asia","Europe","North America","South America","European Union"],axis=0,inplace=True)

temp_1 = vac_world.groupby('location').sum().sort_values(by="people_vaccinated",ascending=False)
temp_1 = temp_1.head(8).reset_index()
temp_1

sns.set(rc={'figure.figsize':(15.7,8.27)})
ax = sns.barplot(x="location", y="people_vaccinated", data=temp_1,palette="bone")
ax.set_xlabel('')
ax.set_ylabel('')
ax.set_title('Quantidade pessoas Vacinadas por País (Top 8)',fontsize=20)

"""### Plotando os gráficos de evolução dos 6 melhores"""

vac_world = df[['location','date','people_vaccinated']]
vac_world.head()

top_vac = temp_1.location

top_vac = top_vac.to_list()

vac_world.dropna(inplace=True)

usa_vac = vac_world.query("location == 'United States'").set_index('date').drop(labels='location',axis=1)
uk_vac = vac_world.query("location == 'United Kingdom'").set_index('date').drop(labels='location',axis=1)
ind_vac = vac_world.query("location == 'India'").set_index('date').drop(labels='location',axis=1)
isr_vac = vac_world.query("location == 'Israel'").set_index('date').drop(labels='location',axis=1)
tur_vac = vac_world.query("location == 'Turkey'").set_index('date').drop(labels='location',axis=1)
ger_vac = vac_world.query("location == 'Germany'").set_index('date').drop(labels='location',axis=1)

fig, axs = plt.subplots(nrows=2,ncols=3,sharex=True)

fig.set_size_inches((30,10))
fig.suptitle('Evolução da Vacina nos Países que mais Vacinaram',fontsize=30)

axs[0,0].plot(usa_vac.index,usa_vac.people_vaccinated,'k')
axs[0,1].plot(uk_vac.index,uk_vac.people_vaccinated,'k')
axs[0,2].plot(ind_vac.index,ind_vac.people_vaccinated,'k')

axs[1,0].plot(isr_vac.index,isr_vac.people_vaccinated,'k')
axs[1,1].plot(tur_vac.index,tur_vac.people_vaccinated,'k')
axs[1,2].plot(ger_vac.index,ger_vac.people_vaccinated,'k')

axs[0, 0].set_title('E.U.A.',{'fontsize': 20})
axs[0, 1].set_title('Reino Unido',{'fontsize': 20})
axs[0, 2].set_title('Índia',{'fontsize': 20})
axs[1, 0].set_title('Israel',{'fontsize': 20})
axs[1, 1].set_title('Turquia',{'fontsize': 20})
axs[1, 2].set_title('Alemanha',{'fontsize': 20})

"""#Médias Móveis"""

df.head()

"""## Casos Diários"""

world_cases = df[['date','location','new_cases']]

world_cases_2 = world_cases.groupby("date").sum()

casos_brasil = world_cases.query("location=='Brazil'")

media_movel_brasil = casos_brasil.new_cases.rolling(14).mean()
media_movel_mundo = world_cases_2.new_cases.rolling(14).mean()

fig = plt.figure(figsize=(15,6))
plt.plot(casos_brasil.date,casos_brasil.new_cases,'k',label="Casos Diários")
plt.plot(casos_brasil.date,media_movel_brasil,'r',label="Média Móvel de 14 dias")
plt.legend()
plt.title("Novos Casos Diários no Brasil",fontsize=20)

world_cases_2.shape[0]

fig = plt.figure(figsize=(15,6))
plt.plot(world_cases_2.index[:443],world_cases_2.new_cases[:443],'k',label="Casos Diários")
plt.plot(world_cases_2.index,media_movel_mundo,'r',label="Média Móvel de 14 dias")
plt.legend()
plt.title("Novos Casos Diários no Mundo",fontsize=20)

casos_brasil_2 = casos_brasil[['date','new_cases']].set_index('date')

world_cases_2_n = world_cases_2/7800000000
casos_brasil_n = casos_brasil_2/211000000

media_movel_brasil_n = casos_brasil_n.new_cases.rolling(14).mean()
media_movel_mundo_n = world_cases_2_n.new_cases.rolling(14).mean()

media_movel_brasil_n

fig = plt.figure(figsize=(15,6))
plt.plot(media_movel_brasil_n.index,media_movel_brasil_n,'k',label="Média Móvel Brasil")
plt.plot(world_cases_2_n.index,media_movel_mundo_n,'r',label="Média Móvel do Mundo")
plt.legend()
plt.title("Novos Casos Diários no Mundo per Capita",fontsize=20)