# -*- coding: utf-8 -*-
"""Acidentes_Brasil

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KN324IaAZNB_l6pZuz_5YSUPOJMnAOvv

#Tratamento dos Dados
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl
from matplotlib import cm
from collections import OrderedDict

dataPrev = pd.read_csv("/content/drive/MyDrive/Datasets/Teste.csv",sep=';')

dataPrev.head()

dataPrev.shape



"""# Estudo das Partes do Corpo de Maiores Ocorrências"""

localLesao = dataPrev['Parte Corpo Atingida']
localLesao = localLesao.value_counts().to_frame().reset_index()
localLesao.columns = ['Local','Total']
localLesao.head()

#Categorizando
#refina_local = ['Pés','Mãos','Braços','Pernas','Tronco','Cabeça','Quadril']
Pes = ['Artelho','Pe (Exceto Artelhos)']
Maos = ['Mao','Punho','Dedos']
NC = ['{ñ class}           ']


selecao = localLesao['Local'].isin(Pes)
localLesao.replace(to_replace=Pes,value='Pés',inplace=True)

for x in range(len(Pes)):
  localLesao.loc[localLesao.Local.str.contains(Pes[x]),'Local'] = 'Pés'

NC = ['{ñ class}','Localizaca','Partes Multipla']
for x in range(len(NC)):
  localLesao.loc[localLesao.Local.str.contains(NC[x]),'Local'] = 'Não Classificado'

for x in range(len(Maos)):
  localLesao.loc[localLesao.Local.str.contains(Maos[x]),'Local'] = 'Mãos'

Tronco = ['Tronco','Dorso','Torno','Respira','Digestivo','Circulatorio','Torax','Nervoso','Musculo-Esq','Abdome','Ombro','Circula']
for x in range(len(Tronco)):
  localLesao.loc[localLesao.Local.str.contains(Tronco[x]),'Local'] = 'Tronco'

Braco = ['Superiores','Cotovelo','Braco','Antebraco']
for x in range(len(Braco)):
  localLesao.loc[localLesao.Local.str.contains(Braco[x]),'Local'] = 'Braco'

Pernas = ['Inferiores','Joelho','Coxa','Perna']
for x in range(len(Pernas)):
  localLesao.loc[localLesao.Local.str.contains(Pernas[x]),'Local'] = 'Pernas'

Cabeca = ['Nariz','Cabeca','Mandibula','Face','Cranio','Boca','Olho','Ouvido','Pescoco']
for x in range(len(Cabeca)):
  localLesao.loc[localLesao.Local.str.contains(Cabeca[x]),'Local'] = 'Cabeça'

Quadris = ['Quadris','Sistema','Genito']
for x in range(len(Quadris)):
  localLesao.loc[localLesao.Local.str.contains(Quadris[x]),'Local'] = 'Quadril'

localLesao = localLesao.groupby('Local').sum()
localLesao.reset_index(inplace=True)

maxIndexLesao = localLesao.Total.idxmax()
localLesao.query("index== @maxIndexLesao")

localLesao.sort_values(by="Total",ascending=False,inplace=True)

localLesao.loc[localLesao.Local.str.contains("Dedo"),'Local'] = 'Dedo'

#localLesao.drop(columns=['level_0','index'],inplace=True)
localLesao.index = range(localLesao.shape[0])
localLesao

sns.barplot(
    x = 'Local',
    y = 'Total',
    data = localLesao,
    palette = "autumn",
)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

plt.rcParams["figure.figsize"] = (20,3)
area = plt.figure()
x = plt.bar(x=localLesao.Local,
            height=localLesao.Total,
            color=['#f51b1b','#ed4e4e','#ff6464','#ff8264','#ff9642','#ffba42','#ffd942','#ffe05d','#fff18a'])
plt.xlabel('Região do Corpo')
plt.ylabel('Quantidade')
plt.title("Quantidade de Acidentes por Região do Corpo")

area.savefig('Gráfico_Acidentes.png',dpi=300,bbox_inches='tight')

"""#Estudo por Sexo"""

nSexo = dataPrev['Sexo']
nSexo = nSexo.value_counts().to_frame().reset_index()
nSexo.columns = ["Sexo","Total"]
nSexo.head()

nSexo.Total[0]/nSexo.Total.sum()

area2 = plt.figure(figsize=(15,5))
y = plt.bar(x=nSexo.Sexo,
            height=nSexo.Total,
            color=['#225560','#EDF060','#F0803C','#310D20'],
            )

"""#Estudo por Região"""

pip install geopandas

import geopandas as gpd

localizacao = pd.DataFrame(dataPrev['UF Munic. Empregador'].value_counts())
#localizacao.reset_index(inplace=True)
#localizacao.columns=['UF','Total']
#localizacao.sort_values(by="UF")
localizacao.sort_index(ascending=True,inplace=True)

localizacao.head()

localizacao.reset_index(inplace=True)
#localizacao.index = localizacao.index.str.upper()
localizacao.columns

#localizacao.drop('level_0',axis=1,inplace=True)

localizacao.columns = ['NM_ESTADO','QUANTITY']
localizacao.head()

fp = "/content/drive/MyDrive/Datasets/UFEBRASIL.shp"
map_df = gpd.read_file(fp)
map_df.plot()

map_df.set_index('NM_ESTADO',inplace=True)

map_df.sort_values(by='NM_ESTADO',ascending=True,inplace=True)

map_df.reset_index(inplace=True)

map_df.head()

merged = pd.concat([map_df,localizacao],axis=1)
merged.head()

variable = 'QUANTITY'
vmin, vmax = localizacao.QUANTITY.min(),localizacao.QUANTITY.max()
fig, ax = plt.subplots(1, figsize=(10, 6))
merged.plot(column=variable, cmap='Blues', linewidth=0.8, ax=ax, edgecolor='0.8')

ax.axis('off')

# add a title
ax.set_title('Quant. de CAT por Estado', \
              fontdict={'fontsize': '18',
                        'fontweight' : '3'})
# create an annotation for the  data source
ax.annotate('Fonte: DataPrev, 2020',
           xy=(0.1, .08), xycoords='figure fraction',
           horizontalalignment='left', verticalalignment='top',
           fontsize=10, color='#555555')

# Create colorbar as a legend
sm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=vmin, vmax=vmax))
sm._A = []
cbar = fig.colorbar(sm)

localizacao.sort_values('QUANTITY',ascending=False).head(10)

"""#Cargo"""

cargo = dataPrev['CBO.1']
cargo.head(5)

cargo = cargo.str.split("-",expand=True)
cargo

cargo.columns = ["CBO","Cargo","NA"]
cargo.head()

cargo.drop(columns="NA",inplace=True)
cargo

maiores_acidentados = cargo.CBO.value_counts().rename_axis('CBO').reset_index(name='Qtd').head(5)
maiores_acidentados

NC = ['{ñ class}']
for x in range(len(NC)):
  maiores_acidentados.loc[maiores_acidentados.CBO.str.contains(NC[x]),'CBO'] = 'Não Classificado'
NC = ['322205']
for x in range(len(NC)):
  maiores_acidentados.loc[maiores_acidentados.CBO.str.contains(NC[x]),'CBO'] = 'Técnico de enfermagem'
  NC = ['784205']
for x in range(len(NC)):
  maiores_acidentados.loc[maiores_acidentados.CBO.str.contains(NC[x]),'CBO'] = 'Alimentador de linha de produção'
  NC = ['782510']
for x in range(len(NC)):
  maiores_acidentados.loc[maiores_acidentados.CBO.str.contains(NC[x]),'CBO'] = 'Motorista de caminhão'
  NC = ['717020']
for x in range(len(NC)):
  maiores_acidentados.loc[maiores_acidentados.CBO.str.contains(NC[x]),'CBO'] = 'Servente de obras'

maiores_acidentados

fig, ax = plt.subplots(figsize=(15, 5))
wedges, texts = ax.pie(x=maiores_acidentados.Qtd, labels = maiores_acidentados.CBO)
ax.set_title("Profissões com Maiores Números de Acidente")
bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0.72)

"""#Tipo do Acidente"""

natuLesao = pd.DataFrame(dataPrev['Natureza da Lesão'])
natuLesao.head()

maiores_lesoes = natuLesao.value_counts().rename_axis('Natureza').reset_index(name='Qtd').head(3)
maiores_lesoes

"""#Filiação"""

filia = dataPrev['Filiação Segurado']
filia.value_counts(normalize=True)



"""#Estudo por Idade"""

idades = pd.DataFrame(dataPrev['Data Nascimento'])
idades.columns = ['DataNascimento']
idades.head()

ano = idades.DataNascimento.str.split("/",expand=True)
ano.columns = ['Dia','Mes','Ano']
ano

ano.Ano = pd.to_numeric(ano.Ano)

ano['IdadeAtual'] = 2020 - ano.Ano
ano

filtro_outliers = ano.query("IdadeAtual < 100 & IdadeAtual > 10")
filtro_outliers.reset_index()

filtro_outliers.IdadeAtual.describe()

sns.boxplot(filtro_outliers.IdadeAtual)

import seaborn as sns

ax = sns.histplot(filtro_outliers.IdadeAtual,bins=7)
ax.set_title('Distribuição de Idade em Número de Acidentes')
ax.set_ylabel('')
ax.set_xlabel('Idade no 1º trimestre de 2020')
ax.set(xlim=(filtro_outliers.IdadeAtual.min()-1,filtro_outliers.IdadeAtual.max()))

filtro_outliers.IdadeAtual.value_counts()

"""#Emissão da CAT"""



